{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { REGISTRATION_SUCCESS, REGISTRATION_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, GET_PROFILE_SUCCESS, GET_PROFILE_FAIL } from \"./types\";\nimport { auth, firebase2, db, firestore } from \"../config/firebase\";\nexport var registerUser = function registerUser(username, email, password, password2, type) {\n  return function _callee(dispatch) {\n    var errorCode, errorMessage;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!(password !== password2)) {\n              _context.next = 4;\n              break;\n            }\n\n            alert(\"Passwords don't match.\");\n            return _context.abrupt(\"return\");\n\n          case 4:\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(firebase2.auth().createUserWithEmailAndPassword(email, password).then(function (response) {\n              var uid = response.user.uid;\n              var data = {\n                id: uid,\n                email: email,\n                username: username,\n                type: type\n              };\n              var usersRef = firestore.collection('profiles');\n              usersRef.doc(uid).set(data).then(function () {\n                console.log(response);\n              }).catch(function (error) {\n                alert(error);\n              });\n            }).catch(function (error) {\n              alert(error);\n            }));\n\n          case 6:\n            _context.next = 15;\n            break;\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            errorCode = _context.t0.code;\n            errorMessage = _context.t0.message;\n            console.log(errorCode);\n            console.log(errorMessage);\n            dispatch({\n              type: REGISTRATION_FAIL\n            });\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n};\nexport var login = function login(email, password) {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(firebase2.auth().signInWithEmailAndPassword(email, password).then(function (response) {\n              var uid = response.user.uid;\n              var usersRef = firestore.collection('profiles');\n              usersRef.doc(uid).get().then(function (userData) {\n                if (!userData.exists) {\n                  alert('User does not exist anymore.');\n                  return;\n                }\n\n                var user = userData.data();\n                dispatch({\n                  type: LOGIN_SUCCESS,\n                  payload: response.user\n                });\n              }).catch(function (error) {\n                alert(error);\n              });\n            }).catch(function (error) {\n              alert(error);\n            }));\n\n          case 3:\n            _context2.next = 9;\n            break;\n\n          case 5:\n            _context2.prev = 5;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n            dispatch({\n              type: LOGIN_FAIL\n            });\n\n          case 9:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  };\n};","map":{"version":3,"sources":["H:/React/native/campus-recruitment/app/actions/auth.js"],"names":["REGISTRATION_SUCCESS","REGISTRATION_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","GET_PROFILE_SUCCESS","GET_PROFILE_FAIL","auth","firebase2","db","firestore","registerUser","username","email","password","password2","type","dispatch","alert","createUserWithEmailAndPassword","then","response","uid","user","data","id","usersRef","collection","doc","set","console","log","catch","error","errorCode","code","errorMessage","message","login","signInWithEmailAndPassword","get","userData","exists","payload"],"mappings":"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","sourcesContent":["import {\r\n  REGISTRATION_SUCCESS,\r\n  REGISTRATION_FAIL,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  GET_PROFILE_SUCCESS,\r\n  GET_PROFILE_FAIL,\r\n} from './types'\r\nimport { auth, firebase2, db, firestore } from '../config/firebase'\r\n\r\nexport const registerUser = (\r\n  username,\r\n  email,\r\n  password,\r\n  password2,\r\n  type\r\n) => async (dispatch) => {\r\n  try {\r\n    if (password !== password2) {\r\n      alert(\"Passwords don't match.\")\r\n      return\r\n    }\r\n    await firebase2\r\n      .auth()\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then((response) => {\r\n        const uid = response.user.uid\r\n        const data = {\r\n          id: uid,\r\n          email,\r\n          username,\r\n          type,\r\n        }\r\n        const usersRef = firestore.collection('profiles')\r\n        usersRef\r\n          .doc(uid)\r\n          .set(data)\r\n          .then(() => {\r\n            console.log(response)\r\n          })\r\n          .catch((error) => {\r\n            alert(error)\r\n          })\r\n      })\r\n      .catch((error) => {\r\n        alert(error)\r\n      })\r\n  } catch (error) {\r\n    var errorCode = error.code\r\n    var errorMessage = error.message\r\n    console.log(errorCode)\r\n    console.log(errorMessage)\r\n    dispatch({\r\n      type: REGISTRATION_FAIL,\r\n    })\r\n  }\r\n}\r\n\r\nexport const login = (email, password) => async (dispatch) => {\r\n  try {\r\n    await firebase2\r\n      .auth()\r\n      .signInWithEmailAndPassword(email, password)\r\n      .then((response) => {\r\n        const uid = response.user.uid\r\n        const usersRef = firestore.collection('profiles')\r\n        usersRef\r\n          .doc(uid)\r\n          .get()\r\n          .then((userData) => {\r\n            if (!userData.exists) {\r\n              alert('User does not exist anymore.')\r\n              return\r\n            }\r\n            const user = userData.data()\r\n            dispatch({\r\n              type: LOGIN_SUCCESS,\r\n              payload: response.user,\r\n            })\r\n          })\r\n          .catch((error) => {\r\n            alert(error)\r\n          })\r\n      })\r\n      .catch((error) => {\r\n        alert(error)\r\n      })\r\n  } catch (error) {\r\n    console.log(error)\r\n    dispatch({\r\n      type: LOGIN_FAIL,\r\n    })\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}