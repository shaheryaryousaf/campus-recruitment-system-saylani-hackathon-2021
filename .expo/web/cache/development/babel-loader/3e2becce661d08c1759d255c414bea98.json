{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { ADD_JOB_SUCCESS, ADD_JOB_FAIL, GET_JOBS_SUCCESS, GET_JOBS_FAIL, GET_SINGLE_JOB_SUCCESS, GET_SI } from \"./types\";\nimport { firestore } from \"../config/firebase\";\nexport var addJob = function addJob(data) {\n  return function _callee(dispatch) {\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            try {\n              firestore.collection('jobs').add(data);\n              dispatch({\n                type: ADD_JOB_SUCCESS,\n                payload: res\n              });\n            } catch (err) {\n              dispatch({\n                type: ADD_JOB_FAIL\n              });\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};\nexport var getAllJobs = function getAllJobs() {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            try {\n              firestore.collection('jobs').onSnapshot(function (snapshot) {\n                var postData = [];\n                snapshot.forEach(function (doc) {\n                  return postData.push(_objectSpread(_objectSpread({}, doc.data()), {}, {\n                    id: doc.id\n                  }));\n                });\n                dispatch({\n                  type: GET_JOBS_SUCCESS,\n                  payload: postData\n                });\n              });\n            } catch (error) {\n              dispatch({\n                type: GET_JOBS_FAIL\n              });\n            }\n\n          case 1:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n};","map":{"version":3,"sources":["H:/React/native/campus-recruitment/app/actions/jobs.js"],"names":["ADD_JOB_SUCCESS","ADD_JOB_FAIL","GET_JOBS_SUCCESS","GET_JOBS_FAIL","GET_SINGLE_JOB_SUCCESS","GET_SI","firestore","addJob","data","dispatch","collection","add","type","payload","res","err","getAllJobs","onSnapshot","snapshot","postData","forEach","doc","push","id","error"],"mappings":";;;;;;;AAAA,SACEA,eADF,EAEEC,YAFF,EAGEC,gBAHF,EAIEC,aAJF,EAKEC,sBALF,EAK0BC,MAL1B;AAOA,SAASC,SAAT;AAKA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,IAAD;AAAA,SAAU,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAC9B,gBAAI;AACFH,cAAAA,SAAS,CAACI,UAAV,CAAqB,MAArB,EAA6BC,GAA7B,CAAiCH,IAAjC;AACAC,cAAAA,QAAQ,CAAC;AACPG,gBAAAA,IAAI,EAAEZ,eADC;AAEPa,gBAAAA,OAAO,EAAEC;AAFF,eAAD,CAAR;AAID,aAND,CAME,OAAOC,GAAP,EAAY;AACZN,cAAAA,QAAQ,CAAC;AACPG,gBAAAA,IAAI,EAAEX;AADC,eAAD,CAAR;AAGD;;AAX6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAV;AAAA,CAAf;AAiBP,OAAO,IAAMe,UAAU,GAAG,SAAbA,UAAa;AAAA,SAAM,kBAAOP,QAAP;AAAA;AAAA;AAAA;AAAA;AAC9B,gBAAI;AACFH,cAAAA,SAAS,CAACI,UAAV,CAAqB,MAArB,EAA6BO,UAA7B,CAAwC,UAACC,QAAD,EAAc;AACpD,oBAAMC,QAAQ,GAAG,EAAjB;AACAD,gBAAAA,QAAQ,CAACE,OAAT,CAAiB,UAACC,GAAD;AAAA,yBAASF,QAAQ,CAACG,IAAT,iCAAmBD,GAAG,CAACb,IAAJ,EAAnB;AAA+Be,oBAAAA,EAAE,EAAEF,GAAG,CAACE;AAAvC,qBAAT;AAAA,iBAAjB;AACAd,gBAAAA,QAAQ,CAAC;AACPG,kBAAAA,IAAI,EAAEV,gBADC;AAEPW,kBAAAA,OAAO,EAAEM;AAFF,iBAAD,CAAR;AAID,eAPD;AAQD,aATD,CASE,OAAOK,KAAP,EAAc;AACdf,cAAAA,QAAQ,CAAC;AACPG,gBAAAA,IAAI,EAAET;AADC,eAAD,CAAR;AAGD;;AAd6B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAN;AAAA,CAAnB","sourcesContent":["import {\r\n  ADD_JOB_SUCCESS,\r\n  ADD_JOB_FAIL,\r\n  GET_JOBS_SUCCESS,\r\n  GET_JOBS_FAIL,\r\n  GET_SINGLE_JOB_SUCCESS, GET_SI\r\n} from './types'\r\nimport { firestore } from '../config/firebase'\r\n\r\n/* ============================== */\r\n/* ADD NEW JOB */\r\n/* ============================== */\r\nexport const addJob = (data) => async (dispatch) => {\r\n  try {\r\n    firestore.collection('jobs').add(data)\r\n    dispatch({\r\n      type: ADD_JOB_SUCCESS,\r\n      payload: res,\r\n    })\r\n  } catch (err) {\r\n    dispatch({\r\n      type: ADD_JOB_FAIL,\r\n    })\r\n  }\r\n}\r\n\r\n/* ============================== */\r\n/* GET ALL COMPANY PROFILES */\r\n/* ============================== */\r\nexport const getAllJobs = () => async (dispatch) => {\r\n  try {\r\n    firestore.collection('jobs').onSnapshot((snapshot) => {\r\n      const postData = []\r\n      snapshot.forEach((doc) => postData.push({ ...doc.data(), id: doc.id }))\r\n      dispatch({\r\n        type: GET_JOBS_SUCCESS,\r\n        payload: postData,\r\n      })\r\n    })\r\n  } catch (error) {\r\n    dispatch({\r\n      type: GET_JOBS_FAIL,\r\n    })\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}